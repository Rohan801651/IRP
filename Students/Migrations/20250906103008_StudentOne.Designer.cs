// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Students.Data;

#nullable disable

namespace Students.Migrations
{
    [DbContext(typeof(StudentContext))]
    [Migration("20250906103008_StudentOne")]
    partial class StudentOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Students.Models.ClassSubject", b =>
                {
                    b.Property<int>("ClassSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassSubjectID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("ClassSubjectID");

                    b.HasIndex("ClassID");

                    b.HasIndex("SubjectID");

                    b.ToTable("ClassSubjects");
                });

            modelBuilder.Entity("Students.Models.FieldSubject", b =>
                {
                    b.Property<int>("FieldSubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldSubjectID"));

                    b.Property<int>("FieldID")
                        .HasColumnType("int");

                    b.Property<int>("SubjectID")
                        .HasColumnType("int");

                    b.HasKey("FieldSubjectID");

                    b.HasIndex("FieldID");

                    b.HasIndex("SubjectID");

                    b.ToTable("FieldSubjects");
                });

            modelBuilder.Entity("Students.Models.Fields", b =>
                {
                    b.Property<int>("FieldID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FieldID"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<int>("FieldName")
                        .HasColumnType("int");

                    b.HasKey("FieldID");

                    b.HasIndex("ClassID");

                    b.ToTable("Fields");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.Property<int>("StudentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StudentId"));

                    b.Property<int>("ClassID")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FieldID")
                        .HasColumnType("int");

                    b.Property<int>("RollNumber")
                        .HasColumnType("int");

                    b.Property<string>("StudentContact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("StudentName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("StudentId");

                    b.HasIndex("ClassID");

                    b.HasIndex("FieldID");

                    b.HasIndex("RollNumber")
                        .IsUnique();

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Students.Models.StudentClasses", b =>
                {
                    b.Property<int>("ClassID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClassID"));

                    b.Property<int>("ClassName")
                        .HasColumnType("int");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ClassID");

                    b.ToTable("StudentClasses");
                });

            modelBuilder.Entity("Students.Models.StudentSubjects", b =>
                {
                    b.Property<int>("SubjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SubjectID"));

                    b.Property<string>("SubjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SubjectID");

                    b.ToTable("StudentSubjects");
                });

            modelBuilder.Entity("Students.Models.ClassSubject", b =>
                {
                    b.HasOne("Students.Models.StudentClasses", "Class")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Students.Models.StudentSubjects", "Subject")
                        .WithMany("ClassSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Students.Models.FieldSubject", b =>
                {
                    b.HasOne("Students.Models.Fields", "Field")
                        .WithMany("FieldSubjects")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Students.Models.StudentSubjects", "Subject")
                        .WithMany("FieldSubjects")
                        .HasForeignKey("SubjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Field");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Students.Models.Fields", b =>
                {
                    b.HasOne("Students.Models.StudentClasses", "Class")
                        .WithMany("Fields")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Class");
                });

            modelBuilder.Entity("Students.Models.Student", b =>
                {
                    b.HasOne("Students.Models.StudentClasses", "Class")
                        .WithMany("Students")
                        .HasForeignKey("ClassID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Students.Models.Fields", "Field")
                        .WithMany("Students")
                        .HasForeignKey("FieldID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Class");

                    b.Navigation("Field");
                });

            modelBuilder.Entity("Students.Models.Fields", b =>
                {
                    b.Navigation("FieldSubjects");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Students.Models.StudentClasses", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("Fields");

                    b.Navigation("Students");
                });

            modelBuilder.Entity("Students.Models.StudentSubjects", b =>
                {
                    b.Navigation("ClassSubjects");

                    b.Navigation("FieldSubjects");
                });
#pragma warning restore 612, 618
        }
    }
}
